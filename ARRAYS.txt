                                                   1.   ARRAYS: Build Array from Permutation

Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

 SOLUTION:
class Solution {
    public int[] buildArray(int[] nums) {
        int [] ans = new int [nums.length];
        for(int i=0;i<nums.length;i++){
            ans[i] = nums[nums[i]];
        }
        return ans;
    }
}

					2.	ARRAYS: Concatenation of Array
Given an integer array nums of length n, you want to create an array ans of length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).

Specifically, ans is the concatenation of two nums arrays.

Return the array ans

class Solution {
    public int[] getConcatenation(int[] nums) {
        int [] ans = new int[2*nums.length];
        for(int i = 0;i<nums.length;i++){
            ans[i]=nums[i];
            ans[nums.length+i] = nums[i];
        }
        return ans;
    }
}

						3. ARRAYS:Running Sum of 1d Array
Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]…nums[i]).

Return the running sum of nums.

class Solution {
    public int[] runningSum(int[] nums) {
        int [] runsum = new int[nums.length];
        for(int i=0;i<nums.length;i++){
            int sum = 0;
            for(int j=0;j<=i;j++){
                sum+=nums[j];
            }
            runsum[i]=sum;
            sum=0;
        }
        return runsum;
    }
}

				4.		ARRAYS: Richest Customer Wealth
You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.

class Solution {
    public int maximumWealth(int[][] accounts) {
        int[] sums = new int[accounts.length];
        for(int i=0;i<accounts.length;i++){
            int sum = 0;
            for(int num:accounts[i]){
                sum+=num;
            }
            sums[i]=sum;
        }
        int max = sums[0];
        for(int i=0;i<sums.length;i++){
            if(sums[i]>max)
                max = sums[i];
        }
        return max;
    }
}

				5.		ARRAYS: Shuffle the Array
Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

Return the array in the form [x1,y1,x2,y2,...,xn,yn].

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int [] ans = new int[nums.length];
        int j = 0;
        for(int i=0;i<n;i++){
            ans[j]=nums[i];
            ans[j+1]=nums[n+i];
            j+=2;
        }
        return ans;
    }
}

				6.		Arrays:Kids With the Greatest Number of Candies
There are n kids with candies. You are given an integer array candies, where each candies[i] represents the number of candies the ith kid has, and an integer extraCandies, denoting the number of extra candies that you have.

Return a boolean array result of length n, where result[i] is true if, after giving the ith kid all the extraCandies, they will have the greatest number of candies among all the kids, or false otherwise.

Note that multiple kids can have the greatest number of candies.

class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        ArrayList<Boolean> ans = new ArrayList<Boolean>();
        int max = candies[0];
    for(int i=0 ; i<candies.length ; i++){
        if(max<candies[i])
            max = candies[i];
    }
    for(int j=0; j<candies.length;j++){
        if(candies[j]+extraCandies>=max)
            ans.add(true);
        else
            ans.add(false);
    }
    return ans;
    }
}

				7.		ARRAYS: Number of Good Pairs
Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int count = 0;
        for(int i=0;i<nums.length-1;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[i]==nums[j] && i<j){
                    count+=1;
                }
            }
        }
        return count;
    }
}

				8.		ARRAYS: How Many Numbers Are Smaller Than the Current Number

Given the array nums, for each nums[i] find out how many numbers in the array are smaller than it. That is, for each nums[i] you have to count the number of valid j's such that j != i and nums[j] < nums[i].

Return the answer in an array.

class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] ans = new int[nums.length];
        for(int i=0;i<nums.length;i++){
            int count=0;
            for(int j=0;j<nums.length;j++){
                if(nums[i]>nums[j]){
                    count++;
                }
            }
            ans[i]=count;
        }
        return ans;
    }
}

				9.	ARRAYS: Create Target Array in the Given Order**
Given two arrays of integers nums and index. Your task is to create target array under the following rules:

Initially target array is empty.
From left to right read nums[i] and index[i], insert at index index[i] the value nums[i] in target array.
Repeat the previous step until there are no elements to read in nums and index.
Return the target array.

It is guaranteed that the insertion operations will be valid.

class Solution {
    public int[] createTargetArray(int[] nums, int[] index) {
        int[] target = new int[nums.length];
        
        for(int i = 0; i < index.length; i++){
            int ind = index[i];
            
            if(ind < i){
                int j = i;
                while(j > ind){
                    target[j] = target[j - 1]; 
                    target[j - 1] = nums[i];
                    j--;
                }
            }
            else{
                 target[i] = nums[ind];
            }
            
        }
        return target;
    }
}

					9.			ARRAYS: Find the Highest Altitude
There is a biker going on a road trip. The road trip consists of n + 1 points at different altitudes. The biker starts his trip on point 0 with altitude equal 0.

You are given an integer array gain of length n where gain[i] is the net gain in altitude between points i​​​​​​ and i + 1 for all (0 <= i < n). Return the highest altitude of a point.

class Solution {
    public int largestAltitude(int[] gain) {
        int[] res = new int[gain.length+1];
        res[0]=0;
        for(int i = 1;i<gain.length+1;i++){
            res[i]=gain[i-1]+res[i-1];
        }
        int max = res[0];
        for(int j=0;j<res.length;j++){
            if(max<res[j]){
                max = res[j];
            }
        }
        return max;
    }
}

					10.	ARRAYS: Flipping an Image
Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.

To flip an image horizontally means that each row of the image is reversed.

For example, flipping [1,1,0] horizontally results in [0,1,1].
To invert an image means that each 0 is replaced by 1, and each 1 is replaced by 0.

For example, inverting [0,1,1] results in [1,0,0].
 

Example 1:

Input: image = [[1,1,0],[1,0,1],[0,0,0]]
Output: [[1,0,0],[0,1,0],[1,1,1]]

public class prac {
    public static void main(String[] args) {
        int [][] image ={{1,1,0},{1,0,1},{0,0,0}};
        int[][] res = new int[image.length][image.length];
        //reverse the first row
        for(int i=0;i<image.length;i++){
            for(int j=image.length-1,k=0;j>=0;j--,k++){
                res[i][k]=image[i][j];
            }
        }
        //invert the values
        for(int i =0;i<image.length;i++){
            for(int j = 0;j<image[i].length;j++){
                if(res[i][j]==1)
                    res[i][j]=0;
                else
                    res[i][j]=1;
            }
        }
        for(int i = 0;i<res.length;i++){
            for(int j=0;j<res[i].length;j++){
                System.out.print(res[i][j]+" ");
            }
            System.out.println();}
    }
}

					11.		ARRAYS: Matrix Diagonal Sum
Given a square matrix mat, return the sum of the matrix diagonals.

Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.
Input: mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]
Output: 25

class Solution {
    public int diagonalSum(int[][] mat) {
        int sum =0;
        //sum of primary diagonal
        for(int i=0,j=0;i<mat.length;i++,j++){
            sum+=mat[i][j];
        }
        //sum of secondary diagonal
        for(int i=0,j=mat.length-1;i<mat.length;i++,j--){
            if(i!=j){
                sum+=mat[i][j];
            }
        }
        return sum;
    }
}
					12.		ARRAYS:Find Numbers with Even Number of Digits
Given an array nums of integers, return how many of them contain an even number of digits.
Input: nums = [12,345,2,6,7896]
Output: 2

class Solution {
    public int findNumbers(int[] nums) {
        int dig=0;
        for(int i=0;i<nums.length;i++){
            int temp = nums[i];
            int count = 0;
            //counts the number of digits
            while(temp!=0){
                count++;
                temp/=10;
            }
            //checks the number of digits are even
            if(count%2==0)
                dig++;
        }
        return dig;
    }
}

			13.			ARRAY: Transpose Matrix
The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.

class Solution {
    public int[][] transpose(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int [][] mat = new int[n][m];
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[i].length;j++){
                mat[j][i] = matrix[i][j];
            }
        }
        return mat;
    }
}
	
				14.                 ARRAYS: Add to Array-Form of Integer
The array-form of an integer num is an array representing its digits in left to right order.

For example, for num = 1321, the array form is [1,3,2,1].
Given num, the array-form of an integer, and an integer k, return the array-form of the integer num + k.
Input: num = [2,1,5], k = 806
Output: [1,0,2,1]
Explanation: 215 + 806 = 1021

class Solution {
    public List<Integer> addToArrayForm(int[] num, int k) {
        List<Integer> li=new ArrayList<>();
        List<Integer> out=new ArrayList<>();
        int c=0;
        //adding the digits
        for(int i=num.length-1;i>=0;i--){
            c+=num[i]+(k%10);
            k/=10;
            li.add(c%10);
            c/=10;
        }
        //if any carry left for additional place in array
        while(k>0 || c!=0){
            c+=(k%10);
            li.add(c%10);
            c/=10;
            k/=10;
        }
        
        for(int i=li.size()-1;i>-1;i--)
            out.add(li.get(i));
        
        return out;

    }
}

				15. ARRAY: 